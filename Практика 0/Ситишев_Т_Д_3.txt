#include <iostream>
#include <windows.h>
#include <string>

using namespace std;

struct Date {
	unsigned short day;
	unsigned short month;
	unsigned short year;
};

struct Lines
{
	char company[17];
	char manufacturer[12];
	int parts;
	float cost;
	struct Date date;
};

void myCentr(string s, int wLine) {

	int w = s.length();
	int delta = (wLine - w) / 2;
	cout << left;
	cout.width(delta); cout << " ";
	cout << s;
	cout.width(delta + 1); cout << " ";

}

void printDate(unsigned short day, unsigned short month, unsigned short year, int wLine) {
	int w = 10;
	int delta = (wLine - w) / 2 - 1;
	cout << left;
	cout.width(1); cout << " ";
	if (day > 9) {
		cout << day;
	}
	else {
		cout << "0" << day;
	}
	cout << ".";
	if (month > 9) {
		cout << month;
	}
	else {
		cout << "0" << month;
	}
	cout << ".";
	cout << year;
	cout.width(2); cout << " ";
}

void DrawLine() {
	cout << "|"; cout.width(79); cout.fill('-'); cout << "-" << "|" << endl;
}

void Draw(struct Lines* line) {
	DrawLine();
	cout.fill(' '); cout.width(80);  cout << left << "|Офисные пакеты"; cout << "|" << endl;
	DrawLine();
	cout.fill(' ');
	cout << left << "| Наименование ";
	cout << left << "| Производитель";
	cout << left << "| Количество сост. частей ";
	cout << left << "| Цена($)";
	cout << left << " | Дата релиза ";
	cout << "|" << endl;
	DrawLine();
	cout.fill(' ');
	for (int i = 0; i < 3; i++) {
		cout << left << "|"; cout.width(14); cout << left << line[i].company;
		cout << left << "|"; cout.width(14); cout << left << line[i].manufacturer;
		cout << left << "|"; cout.width(25); cout << left << line[i].parts;
		std::cout.precision(2);
		cout << left << "|"; cout.width(9); cout << left << fixed << line[i].cost;
		cout << left << "|";
		printDate(line[i].date.day, line[i].date.month, line[i].date.year, 26);
		cout << "|" << endl;
	}
	DrawLine();
	cout.fill(' '); cout.width(80);  cout << left << "|Примечание: возможно бесплатно получить продукт StarOffice через Internet "; cout << "|" << endl;
	DrawLine();
}

struct Date getMinDate(struct Lines* line) {

	int k = 0;

	unsigned short minMonth = line[0].date.month;
	unsigned short minYear = line[0].date.year;
	unsigned short minDay = line[0].date.day;
	for (int i = 1; i < 3; i++) {
		if (line[i].date.month < minMonth) {
			minMonth = line[i].date.month;
			k = i;
		}
		minYear = line[k].date.year;
		minDay = line[k].date.day;
	}
	struct Date minDate = { minDay, minMonth, minYear };
	return minDate;
};


struct Date getMaxDate(struct Lines* line) {

	int m = 0;

	unsigned short maxMonth = line[0].date.month;
	unsigned short maxYear = line[0].date.year;
	unsigned short maxDay = line[0].date.day;
	for (int i = 1; i < 3; i++) {
		if (line[i].date.month > maxMonth) {
			maxMonth = line[i].date.month;
			m = i;
		}
		maxYear = line[m].date.year;
		maxDay = line[m].date.day;
	}
	struct Date minDate = { maxDay, maxMonth, maxYear };
	return minDate;
};

int  findIndex(struct Lines* line, const struct Date date) {
	int ind = -1;
	for (int i = 0; i < 3; i++) {
		if (line[i].date.year == date.year && line[i].date.month == date.month && line[i].date.day == date.day)
			ind = i;
	}
	return ind;
}

int main()
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);

	struct Lines line[10];

	line[0] = { "Office", "Microsoft", 4, 870.99, {11,01,2011} };
	line[1] = { "SmartSute", "Lotus", 5, 1020.99, {21,12,2012} };
	line[2] = { "StarOffice", "Sun", 4, 9.99, {21,10,2020} };

	Draw(line);

	struct Date minDate = getMinDate(line);
	cout << "Минимальная дата: "; cout.fill(' ');
	printDate(minDate.day, minDate.month, minDate.year, 16);
	cout << endl;

	struct Date maxDate = getMaxDate(line);
	cout << "Максимальная дата: "; cout.fill(' ');
	printDate(maxDate.day, maxDate.month, maxDate.year, 16);
	cout << endl;

	int indMaxDate = findIndex(line, maxDate);
	int indMinDate = findIndex(line, minDate);

	struct Lines newLine[10];
	for (int i = 0; i < 3; i++) {
		if (i == indMaxDate)
			newLine[i] = line[indMinDate];
		else if (i == indMinDate)
			newLine[i] = line[indMaxDate];
		else
			newLine[i] = line[i];
	}

	Draw(newLine);
}